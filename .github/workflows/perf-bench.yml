name: Performance Benchmarks

on:
  workflow_run:
    workflows: ["GrepWise CI"]
    types: [completed]
  workflow_dispatch:

jobs:
  perf:
    name: Run JMeter performance tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 30
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: 25
          github-token: ${{ secrets.GITHUB_TOKEN }}
          distribution: 'graalvm-community'
          native-image-job-reports: 'false'

      - name: Make perf scripts executable
        run: chmod +x scripts/perf/against.sh

      - name: Download JAR artifact from CI for this commit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
            RUN_ID="${{ github.event.workflow_run.id }}"
          else
            SHA="${{ github.sha }}"
            RUN_ID=$(gh api -q '.workflow_runs[] | select(.head_sha=="'"$SHA"'" and .name=="GrepWise CI" and .conclusion=="success") | .id' \
              repos/$REPO/actions/runs | head -n1)
          fi
          if [ -z "$RUN_ID" ]; then
            echo "No successful CI run found for $SHA. Exiting." >&2
            exit 1
          fi
          ART_ID=$(gh api -q '.artifacts[] | select(.name=="grepwise-jar") | .id' \
            repos/$REPO/actions/runs/$RUN_ID/artifacts)
          mkdir -p dist
          if [ -n "$ART_ID" ]; then
            echo "Found CI artifact $ART_ID; downloading..."
            gh api -H "Accept: application/zip" \
              repos/$REPO/actions/artifacts/$ART_ID/zip > dist/jar.zip
            unzip -o dist/jar.zip -d dist || true
          else
            echo "CI artifact not found; will try GitHub Packages fallback." >&2
          fi
          # Fallback: if no jar in dist, fetch from GitHub Packages SNAPSHOT
          if ! ls dist/*-SNAPSHOT.jar >/dev/null 2>&1; then
            echo "Falling back to GitHub Packages (Maven SNAPSHOT)"
            VERSION=$(mvn -q -Dexec.cleanupDaemonThreads=false help:evaluate -Dexpression=project.version -DforceStdout)
            echo "Attempting to download io.github.ozkanpakdil:grepwise:$VERSION from GitHub Packages"
            mkdir -p "$HOME/.m2"
            cat > "$HOME/.m2/settings.xml" <<'XML'
            <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
              <servers>
                <server>
                  <id>github</id>
                  <username>${env.GITHUB_ACTOR}</username>
                  <password>${env.GITHUB_TOKEN}</password>
                </server>
              </servers>
              <profiles>
                <profile>
                  <id>github</id>
                  <repositories>
                    <repository>
                      <id>github</id>
                      <url>https://maven.pkg.github.com/${{ github.repository }}</url>
                    </repository>
                  </repositories>
                </profile>
              </profiles>
              <activeProfiles>
                <activeProfile>github</activeProfile>
              </activeProfiles>
            </settings>
            XML
            mvn -s "$HOME/.m2/settings.xml" -q -ntp dependency:get -Dartifact=io.github.ozkanpakdil:grepwise:"$VERSION"
            JAR_PATH="$HOME/.m2/repository/io/github/ozkanpakdil/grepwise/$VERSION/grepwise-$VERSION.jar"
            if [ -f "$JAR_PATH" ]; then
              cp "$JAR_PATH" dist/
              echo "Downloaded SNAPSHOT from GitHub Packages to dist/"
            else
              echo "ERROR: Could not locate JAR after fallback download." >&2
              exit 1
            fi
          fi
          echo "Downloaded files:" && ls -la dist

      - name: Start application (downloaded JAR)
        run: |
          JAR=$(ls dist/*-SNAPSHOT.jar | head -n1)
          nohup java -jar "$JAR" > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for application to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "Application is up"; exit 0; fi; sleep 2; done
          echo "Application did not start in time"; tail -n 200 app.log; exit 1

      - name: Run JMeter tests only (app already running)
        env:
          GW_HOST: localhost
          GW_HTTP_PORT: '8080'
          GW_SYSLOG_PORT: '1514'
          USERS: '10'
          DURATION: '60'
          RAMP_UP: '5'
        run: |
          mvn -B -ntp -Pperf-test \
            -Djmeter.skip=false \
            -Djmeter.base.dir="target/jmeter" \
            -Dgw.host="$GW_HOST" \
            -Dgw.http.port="$GW_HTTP_PORT" \
            -Dgw.syslog.port="$GW_SYSLOG_PORT" \
            -Dusers="$USERS" \
            -DrampUp="$RAMP_UP" \
            -DdurationSeconds="$DURATION" \
            jmeter:configure@configuration jmeter:jmeter@jmeter-tests jmeter:results@jmeter-tests

      - name: Build perf summary and compare to history (Java)
        id: summarize
        if: always()
        shell: bash
        run: |
          set +e
          CODE=0
          java scripts/perf/SummarizeAndCompare.java
          CODE=$?
          echo "code=$CODE" >> $GITHUB_OUTPUT
          REPO=${{ github.repository }}
          OWNER=${{ github.repository_owner }}
          RUN=${{ github.run_number }}
          PAGES_BASE="https://${OWNER}.github.io/${REPO#*/}/perf"
          if [ -f target/jmeter/perf-summary.md ]; then
            cat target/jmeter/perf-summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\n### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML dashboards: target/jmeter/reports/…" >> $GITHUB_STEP_SUMMARY
          echo "- Raw CSV results: target/jmeter/results/…" >> $GITHUB_STEP_SUMMARY
          echo "\n### GitHub Pages (persistent)" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: ${PAGES_BASE}/latest/" >> $GITHUB_STEP_SUMMARY
          echo "- This run: ${PAGES_BASE}/runs/${RUN}/" >> $GITHUB_STEP_SUMMARY
          echo "\nNote: Configure GitHub Pages to 'Deploy from a branch' → branch: gh-pages, folder: / (root)." >> $GITHUB_STEP_SUMMARY

      - name: Prepare perf reports for GitHub Pages (root)
        if: always()
        run: |
          RUN=${{ github.run_number }}
          BASE=gh-pages-content
          RUN_DIR=${BASE}/perf/runs/${RUN}
          LATEST_DIR=${BASE}/perf/latest
          rm -rf "${RUN_DIR}" "${LATEST_DIR}"
          mkdir -p "${RUN_DIR}" "${LATEST_DIR}"
          # Copy all generated outputs into this run folder
          cp -r target/jmeter/* "${RUN_DIR}/" || true
          # Copy summaries (keep Markdown and JSON)
          if [ -f target/jmeter/perf-summary.md ]; then
            cp target/jmeter/perf-summary.md "${RUN_DIR}/" || true
          fi
          if [ -f target/jmeter/perf-summary.json ]; then
            cp target/jmeter/perf-summary.json "${RUN_DIR}/" || true
          fi
          # Generate a simple HTML index for this run
          cat > "${RUN_DIR}/index.html" << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>GrepWise Perf - This Run</title>
          <h1>GrepWise Performance - This Run</h1>
          <ul>
            <li><a href="perf-summary.html">HTML summary</a></li>
            <li><a href="perf-summary.md">Markdown summary (raw)</a></li>
            <li><a href="reports/">HTML dashboards</a> (if present)</li>
            <li><a href="results/">Raw CSV results</a> (if present)</li>
          </ul>
          <div id="reports-list"></div>
          <div id="results-list"></div>
          <script>
          </script>
          <p><a href="../../latest/">See latest</a></p>
          HTML

          # Create index pages under reports/ and results/ for this run
          if [ -d "${RUN_DIR}/reports" ]; then
            {
              echo "<!doctype html>";
              echo "<meta charset=\"utf-8\">";
              echo "<title>Reports Index</title>";
              echo "<h1>JMeter HTML Dashboards</h1>";
              echo "<ul>";
              for d in "${RUN_DIR}/reports"/*; do
                [ -d "$d" ] || continue;
                base=$(basename "$d");
                echo "<li><a href=\"$base/index.html\">$base</a></li>";
              done;
              echo "</ul>";
              echo "<p><a href=\"../index.html\">Back</a></p>";
            } > "${RUN_DIR}/reports/index.html"
          fi
          if [ -d "${RUN_DIR}/results" ]; then
            {
              echo "<!doctype html>";
              echo "<meta charset=\"utf-8\">";
              echo "<title>CSV Results</title>";
              echo "<h1>Raw CSV Results</h1>";
              echo "<ul>";
              for f in "${RUN_DIR}/results"/*.csv; do
                [ -f "$f" ] || continue;
                base=$(basename "$f");
                echo "<li><a href=\"$base\">$base</a></li>";
              done;
              echo "</ul>";
              echo "<p><a href=\"../index.html\">Back</a></p>";
            } > "${RUN_DIR}/results/index.html"
          fi
          
          # Update latest pointer
          rm -rf "${LATEST_DIR}"
          mkdir -p "${LATEST_DIR}"
          cp -r "${RUN_DIR}"/* "${LATEST_DIR}/" || true

      - name: Download existing gh-pages content to merge
        if: always()
        continue-on-error: true
        run: |
          git fetch origin gh-pages:gh-pages || true
          git checkout gh-pages -- e2e/ frontend/coverage/ backend/junit/ index.html 2>/dev/null || echo "No existing e2e/ frontend/coverage/ backend/junit or index.html found"
          if [ -d e2e ] || [ -d frontend/coverage ] || [ -d backend/junit ] || [ -f index.html ]; then
            mkdir -p gh-pages-content/
            [ -d e2e ] && mv e2e gh-pages-content/
            [ -d frontend/coverage ] && mkdir -p gh-pages-content/frontend && mv frontend/coverage gh-pages-content/frontend/
            [ -d backend/junit ] && mkdir -p gh-pages-content/backend && mv backend/junit gh-pages-content/backend/
            [ -f index.html ] && mv index.html gh-pages-content/
          fi
          git checkout main

      - name: Deploy perf to gh-pages (root)
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages-content
          keep_files: false

      - name: Enforce block threshold (>20% regression)
        if: ${{ steps.summarize.outputs.code == '2' }}
        run: |
          echo "Performance regression exceeds 20% in p95 latency for at least one scenario. Failing the job." >&2
          exit 1

      - name: GraalVM native-image smoke build (optional)
        if: always()
        continue-on-error: true
        run: |
          echo "Attempting native-image build for smoke testing..."
          ./mvnw -q -B -Pnative -DskipTests package || mvn -q -B -Pnative -DskipTests package || true
          echo "Native build finished (success or tolerated failure)."

      - name: Upload artifacts (JMeter reports & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-results-${{ github.run_number }}
          path: |
            target/jmeter/**
            app.log

      - name: Cleanup (stop app)
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
