name: Performance Benchmarks

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/perf/**'
  release:
    types: [ published ]

jobs:
  perf:
    name: Run JMeter performance tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: 25
          github-token: ${{ secrets.GITHUB_TOKEN }}
          distribution: 'graalvm-community'
          native-image-job-reports: 'false'

      - name: Setup Node (for frontend build during Maven)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Make perf scripts executable
        run: chmod +x scripts/perf/local.sh scripts/perf/against.sh

      - name: Run local perf test runner (build, launch, test, stop)
        env:
          GW_HOST: localhost
          GW_HTTP_PORT: '8080'
          GW_SYSLOG_PORT: '1514'
          USERS: '10'
          DURATION: '60'
          RAMP_UP: '5'
        run: |
          scripts/perf/local.sh

      - name: Build perf summary and compare to history (Java)
        id: summarize
        if: always()
        shell: bash
        run: |
          set +e
          CODE=0
          java scripts/perf/SummarizeAndCompare.java
          CODE=$?
          echo "code=$CODE" >> $GITHUB_OUTPUT
          REPO=${{ github.repository }}
          OWNER=${{ github.repository_owner }}
          RUN=${{ github.run_number }}
          PAGES_BASE="https://${OWNER}.github.io/${REPO#*/}/perf"
          if [ -f target/jmeter/perf-summary.md ]; then
            cat target/jmeter/perf-summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "## Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\n### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML dashboards: target/jmeter/reports/…" >> $GITHUB_STEP_SUMMARY
          echo "- Raw CSV results: target/jmeter/results/…" >> $GITHUB_STEP_SUMMARY
          echo "\n### GitHub Pages (persistent)" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: ${PAGES_BASE}/latest/" >> $GITHUB_STEP_SUMMARY
          echo "- This run: ${PAGES_BASE}/runs/${RUN}/" >> $GITHUB_STEP_SUMMARY
          echo "\nNote: Configure GitHub Pages to 'Deploy from a branch' → branch: gh-pages, folder: / (root)." >> $GITHUB_STEP_SUMMARY

      - name: Publish perf outputs to docs/ (GitHub Pages)
        if: always()
        run: |
          RUN=${{ github.run_number }}
          RUN_DIR=docs/perf/runs/${RUN}
          LATEST_DIR=docs/perf/latest
          rm -rf "${RUN_DIR}" "${LATEST_DIR}"
          mkdir -p "${RUN_DIR}" "${LATEST_DIR}"
          # Copy all generated outputs into this run folder
          cp -r target/jmeter/* "${RUN_DIR}/" || true
          # Copy summaries (keep Markdown and JSON)
          if [ -f target/jmeter/perf-summary.md ]; then
            cp target/jmeter/perf-summary.md "${RUN_DIR}/" || true
          fi
          if [ -f target/jmeter/perf-summary.json ]; then
            cp target/jmeter/perf-summary.json "${RUN_DIR}/" || true
          fi
          # Generate a simple HTML index for this run
          cat > "${RUN_DIR}/index.html" << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>GrepWise Perf - This Run</title>
          <h1>GrepWise Performance - This Run</h1>
          <ul>
            <li><a href="perf-summary.md">Markdown summary</a></li>
            <li><a href="reports/">HTML dashboards</a> (if present)</li>
            <li><a href="results/">Raw CSV results</a> (if present)</li>
          </ul>
          <p><a href="../../latest/">See latest</a></p>
          HTML
          
          # Update latest pointer
          rm -rf "${LATEST_DIR}"
          mkdir -p "${LATEST_DIR}"
          cp -r "${RUN_DIR}"/* "${LATEST_DIR}/" || true
          
          # Generate an HTML index for the latest folder
          cat > "${LATEST_DIR}/index.html" << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>GrepWise Perf - Latest</title>
          <h1>GrepWise Performance - Latest</h1>
          <ul>
            <li><a href="perf-summary.md">Markdown summary</a></li>
            <li><a href="reports/">HTML dashboards</a></li>
            <li><a href="results/">Raw CSV results</a></li>
          </ul>
          <p><a href="../">Back to perf index</a></p>
          HTML
          
          # Create top-level landing pages
          mkdir -p docs/perf
          cat > docs/index.html << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=perf/latest/">
          <title>GrepWise Perf</title>
          <p>Redirecting to <a href="perf/latest/">perf/latest/</a>…</p>
          HTML
          
          cat > docs/perf/index.html << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>GrepWise Performance</title>
          <h1>GrepWise Performance</h1>
          <ul>
            <li><a href="latest/">Latest results</a></li>
            <li><a href="runs/">Browse runs</a> (open numeric subfolders)</li>
          </ul>
          HTML
          
          # Ensure GitHub Pages doesn't run Jekyll and can serve nested paths
          touch docs/.nojekyll

      - name: Commit perf history, badge & pages content
        if: ${{ always() && github.ref == 'refs/heads/main' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docs/perf/history.csv docs/perf/badge.svg docs/perf/runs docs/perf/latest docs/.nojekyll || true
          git commit -m "chore(perf): update perf history & publish pages [skip ci]" || echo "No history changes"
          git push || true

      - name: Deploy docs/ to gh-pages (persistent website)
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: docs
          force_orphan: true

      - name: Enforce block threshold (>20% regression)
        if: ${{ steps.summarize.outputs.code == '2' }}
        run: |
          echo "Performance regression exceeds 20% in p95 latency for at least one scenario. Failing the job." >&2
          exit 1

      - name: GraalVM native-image smoke build (optional)
        if: always()
        continue-on-error: true
        run: |
          echo "Attempting native-image build for smoke testing..."
          ./mvnw -q -B -Pnative -DskipTests package || mvn -q -B -Pnative -DskipTests package || true
          echo "Native build finished (success or tolerated failure)."

      - name: Upload artifacts (JMeter reports & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-results-${{ github.run_number }}
          path: |
            target/jmeter/**
            docs/perf/history.csv
            docs/perf/badge.svg
            app.log

      - name: Cleanup (stop app)
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
