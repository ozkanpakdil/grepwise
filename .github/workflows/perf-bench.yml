name: Performance Benchmarks

on:
  workflow_run:
    workflows: ["GrepWise CI"]
    types: [completed]
  workflow_dispatch:

jobs:
  perf:
    name: Run JMeter performance tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 30
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: 25
          github-token: ${{ secrets.GITHUB_TOKEN }}
          distribution: 'graalvm-community'
          native-image-job-reports: 'false'

      - name: Make perf scripts executable
        run: chmod +x scripts/perf/against.sh

      - name: Download grepwise SNAPSHOT jar
        run: |
          set -xe
          curl -u "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" \
            -O https://maven.pkg.github.com/ozkanpakdil/grepwise/io/github/ozkanpakdil/grepwise/0.0.1-SNAPSHOT/maven-metadata.xml
          
          cat maven-metadata.xml
          
          timestamp=$(grep -oPm1 "(?<=<timestamp>)[^<]+" maven-metadata.xml)
          buildnum=$(grep -oPm1 "(?<=<buildNumber>)[^<]+" maven-metadata.xml)
          jar_name="0.0.1-${timestamp}-${buildnum}"
          
          full_url="https://maven.pkg.github.com/ozkanpakdil/grepwise/io/github/ozkanpakdil/grepwise/0.0.1-SNAPSHOT/grepwise-${jar_name}.jar"
          curl -u "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" -L "$full_url" -o "grepwise-${jar_name}.jar"
          
          ls -ltrh grepwise-*.jar


      - name: Start application (downloaded JAR)
        run: |
          JAR=$(ls grepwise-*.jar | head -n1)
          nohup java -Drate.limiting.enabled=false -jar "$JAR" > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for application to be ready
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "Application is up"; exit 0; fi; sleep 2; done
          echo "Application did not start in time"; tail -n 200 app.log; exit 1

      - name: Run JMeter tests only (app already running)
        env:
          GW_HOST: localhost
          GW_HTTP_PORT: '8080'
          GW_SYSLOG_PORT: '1514'
          USERS: '10'
          DURATION: '60'
          RAMP_UP: '5'
        run: |
          mvn -B -ntp -Pperf-test \
            -Djmeter.skip=false \
            -Djmeter.base.dir="target/jmeter" \
            -Dgw.host="$GW_HOST" \
            -Dgw.http.port="$GW_HTTP_PORT" \
            -Dgw.syslog.port="$GW_SYSLOG_PORT" \
            -Dusers="$USERS" \
            -DrampUp="$RAMP_UP" \
            -DdurationSeconds="$DURATION" \
            jmeter:configure@configuration jmeter:jmeter@jmeter-tests jmeter:results@jmeter-tests

      - name: Build perf summary and compare to history (Java)
        id: summarize
        if: always()
        shell: bash
        run: |
          set -xe
          CODE=0
          java scripts/perf/SummarizeAndCompare.java
          CODE=$?
          echo "code=$CODE" >> $GITHUB_OUTPUT
          REPO=${{ github.repository }}
          OWNER=${{ github.repository_owner }}
          RUN=${{ github.run_number }}
          ATTEMPT=${{ github.run_attempt }}
          PAGES_BASE="https://${OWNER}.github.io/${REPO#*/}/perf"
          cat target/jmeter/perf-summary.md >> $GITHUB_STEP_SUMMARY
          
          # Create deployment directory
          mkdir -p gh-pages-content
          
          # Try to get existing content from gh-pages branch
          git fetch origin gh-pages:gh-pages || true
          if git checkout gh-pages -- index.html e2e/ 2>/dev/null; then
            mv index.html e2e/ gh-pages-content/ 2>/dev/null || true
          fi
          
          # Copy performance test results (excluding CSV files)
          mkdir -p gh-pages-content/perf/latest/
          rsync -av --exclude='*.csv' target/jmeter/ gh-pages-content/perf/latest/
          
          # Archive this run (by workflow run number for stable links, excluding CSV files)
          mkdir -p gh-pages-content/perf/runs/${RUN}/
          rsync -av --exclude='*.csv' target/jmeter/ gh-pages-content/perf/runs/${RUN}/
          
          echo "## Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          
          echo "\n### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML dashboards: target/jmeter/reports/…" >> $GITHUB_STEP_SUMMARY
          echo "- Raw CSV results: available in workflow artifacts only" >> $GITHUB_STEP_SUMMARY
          echo "\n### GitHub Pages (persistent)" >> $GITHUB_STEP_SUMMARY
          echo "- Latest: ${PAGES_BASE}/latest/" >> $GITHUB_STEP_SUMMARY
          echo "- This run: ${PAGES_BASE}/runs/${RUN}/" >> $GITHUB_STEP_SUMMARY
          echo "\nNote: Configure GitHub Pages to 'Deploy from a branch' → branch: gh-pages, folder: / (root)." >> $GITHUB_STEP_SUMMARY

      - name: Prepare perf reports for GitHub Pages (root)
        if: always()
        run: |
          RUN=${{ github.run_number }}
          BASE=gh-pages-content
          RUN_DIR=${BASE}/perf/runs/${RUN}
          LATEST_DIR=${BASE}/perf/latest
          rm -rf "${RUN_DIR}" "${LATEST_DIR}"
          mkdir -p "${RUN_DIR}" "${LATEST_DIR}"
          # Copy generated outputs (excluding CSV files) into this run folder
          rsync -av --exclude='*.csv' target/jmeter/ "${RUN_DIR}/" || true
          # Copy summaries (keep Markdown and JSON)
          if [ -f target/jmeter/perf-summary.md ]; then
            cp target/jmeter/perf-summary.md "${RUN_DIR}/" || true
          fi
          if [ -f target/jmeter/perf-summary.json ]; then
            cp target/jmeter/perf-summary.json "${RUN_DIR}/" || true
          fi
          # Generate a simple HTML index for this run
          cat > "${RUN_DIR}/index.html" << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>GrepWise Perf - This Run</title>
          <h1>GrepWise Performance - This Run</h1>
          <ul>
            <li><a href="perf-summary.html">HTML summary</a></li>
            <li><a href="perf-summary.md">Markdown summary (raw)</a></li>
            <li><a href="reports/">HTML dashboards</a> (if present)</li>
            <li>Raw CSV results are available in workflow artifacts</li>
          </ul>
          <div id="reports-list"></div>
          <div id="results-list"></div>
          <script>
          </script>
          <p><a href="../../latest/">See latest</a></p>
          HTML

          # Create index page under reports/ for this run
          if [ -d "${RUN_DIR}/reports" ]; then
            {
              echo "<!doctype html>";
              echo "<meta charset=\"utf-8\">";
              echo "<title>Reports Index</title>";
              echo "<h1>JMeter HTML Dashboards</h1>";
              echo "<ul>";
              for d in "${RUN_DIR}/reports"/*; do
                [ -d "$d" ] || continue;
                base=$(basename "$d");
                echo "<li><a href=\"$base/index.html\">$base</a></li>";
              done;
              echo "</ul>";
              echo "<p><a href=\"../index.html\">Back</a></p>";
            } > "${RUN_DIR}/reports/index.html"
          fi
          
          # Update latest pointer
          rm -rf "${LATEST_DIR}"
          mkdir -p "${LATEST_DIR}"
          cp -r "${RUN_DIR}"/* "${LATEST_DIR}/" || true

      - name: Download existing gh-pages content to merge
        if: always()
        continue-on-error: true
        run: |
          git fetch origin gh-pages:gh-pages || true
          git checkout gh-pages -- e2e/ frontend/coverage/ backend/junit/ index.html 2>/dev/null || echo "No existing e2e/ frontend/coverage/ backend/junit or index.html found"
          if [ -d e2e ] || [ -d frontend/coverage ] || [ -d backend/junit ] || [ -f index.html ]; then
            mkdir -p gh-pages-content/
            [ -d e2e ] && mv e2e gh-pages-content/
            [ -d frontend/coverage ] && mkdir -p gh-pages-content/frontend && mv frontend/coverage gh-pages-content/frontend/
            [ -d backend/junit ] && mkdir -p gh-pages-content/backend && mv backend/junit gh-pages-content/backend/
            [ -f index.html ] && mv index.html gh-pages-content/
          fi


      - name: Deploy perf to gh-pages (root)
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages-content
          keep_files: true
          force: true
          exclude_assets: |
            perf/**/*.csv

      - name: Enforce block threshold (>20% regression)
        if: ${{ steps.summarize.outputs.code == '2' }}
        run: |
          echo "Performance regression exceeds 20% in p95 latency for at least one scenario. Failing the job." >&2
          exit 1

      - name: Upload artifacts (JMeter reports & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-results-${{ github.run_number }}
          path: |
            target/jmeter/**
            app.log

      - name: Cleanup (stop app)
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi
