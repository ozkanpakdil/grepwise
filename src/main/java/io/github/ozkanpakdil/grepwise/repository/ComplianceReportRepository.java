package io.github.ozkanpakdil.grepwise.repository;

import io.github.ozkanpakdil.grepwise.model.ComplianceReport;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * Repository for ComplianceReport entities.
 * Provides methods for storing and retrieving compliance reports.
 */
@Repository
public class ComplianceReportRepository {

    private final Map<String, ComplianceReport> reports = new ConcurrentHashMap<>();

    /**
     * Save a compliance report
     *
     * @param report the report to save
     * @return the saved report
     */
    public ComplianceReport save(ComplianceReport report) {
        if (report.getId() == null) {
            report.setId(UUID.randomUUID().toString());
        }

        if (report.getGeneratedAt() == null) {
            report.setGeneratedAt(LocalDateTime.now());
        }

        reports.put(report.getId(), report);
        return report;
    }

    /**
     * Find a compliance report by ID
     *
     * @param id the ID of the report
     * @return the report, or null if not found
     */
    public ComplianceReport findById(String id) {
        return reports.get(id);
    }

    /**
     * Find all compliance reports
     *
     * @return list of all compliance reports
     */
    public List<ComplianceReport> findAll() {
        return new ArrayList<>(reports.values());
    }

    /**
     * Find all compliance reports with pagination
     *
     * @param page the page number (0-based)
     * @param size the page size
     * @return list of compliance reports for the specified page
     */
    public List<ComplianceReport> findAll(int page, int size) {
        return reports.values().stream()
                .sorted(Comparator.comparing(ComplianceReport::getGeneratedAt).reversed())
                .skip((long) page * size)
                .limit(size)
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by report type
     *
     * @param reportType the type of report
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByReportType(String reportType) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getReportType(), reportType))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by report type with pagination
     *
     * @param reportType the type of report
     * @param page       the page number (0-based)
     * @param size       the page size
     * @return list of compliance reports for the specified page
     */
    public List<ComplianceReport> findByReportType(String reportType, int page, int size) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getReportType(), reportType))
                .sorted(Comparator.comparing(ComplianceReport::getGeneratedAt).reversed())
                .skip((long) page * size)
                .limit(size)
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by status
     *
     * @param status the status of the report
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByStatus(String status) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getStatus(), status))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by status with pagination
     *
     * @param status the status of the report
     * @param page   the page number (0-based)
     * @param size   the page size
     * @return list of compliance reports for the specified page
     */
    public List<ComplianceReport> findByStatus(String status, int page, int size) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getStatus(), status))
                .sorted(Comparator.comparing(ComplianceReport::getGeneratedAt).reversed())
                .skip((long) page * size)
                .limit(size)
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by generated by user
     *
     * @param generatedBy the user who generated the report
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByGeneratedBy(String generatedBy) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getGeneratedBy(), generatedBy))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by generated by user with pagination
     *
     * @param generatedBy the user who generated the report
     * @param page        the page number (0-based)
     * @param size        the page size
     * @return list of compliance reports for the specified page
     */
    public List<ComplianceReport> findByGeneratedBy(String generatedBy, int page, int size) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getGeneratedBy(), generatedBy))
                .sorted(Comparator.comparing(ComplianceReport::getGeneratedAt).reversed())
                .skip((long) page * size)
                .limit(size)
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by name containing the given text
     *
     * @param name the name to search for
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByNameContaining(String name) {
        return reports.values().stream()
                .filter(report -> report.getName() != null &&
                        report.getName().toLowerCase().contains(name.toLowerCase()))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by description containing the given text
     *
     * @param description the description to search for
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByDescriptionContaining(String description) {
        return reports.values().stream()
                .filter(report -> report.getDescription() != null &&
                        report.getDescription().toLowerCase().contains(description.toLowerCase()))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports generated between the given dates
     *
     * @param startDate the start date
     * @param endDate   the end date
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByGeneratedAtBetween(LocalDateTime startDate, LocalDateTime endDate) {
        return reports.values().stream()
                .filter(report -> !report.getGeneratedAt().isBefore(startDate) &&
                        !report.getGeneratedAt().isAfter(endDate))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by report type and status
     *
     * @param reportType the type of report
     * @param status     the status of the report
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByReportTypeAndStatus(String reportType, String status) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getReportType(), reportType) &&
                        Objects.equals(report.getStatus(), status))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports by report type and generated by user
     *
     * @param reportType  the type of report
     * @param generatedBy the user who generated the report
     * @return list of compliance reports
     */
    public List<ComplianceReport> findByReportTypeAndGeneratedBy(String reportType, String generatedBy) {
        return reports.values().stream()
                .filter(report -> Objects.equals(report.getReportType(), reportType) &&
                        Objects.equals(report.getGeneratedBy(), generatedBy))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports with filters
     *
     * @param filters map of filter criteria
     * @return list of compliance reports matching the filters
     */
    public List<ComplianceReport> findWithFilters(Map<String, Object> filters) {
        return reports.values().stream()
                .filter(report -> matchesFilters(report, filters))
                .collect(Collectors.toList());
    }

    /**
     * Find compliance reports with filters and pagination
     *
     * @param filters map of filter criteria
     * @param page    the page number (0-based)
     * @param size    the page size
     * @return list of compliance reports matching the filters for the specified page
     */
    public List<ComplianceReport> findWithFilters(Map<String, Object> filters, int page, int size) {
        return reports.values().stream()
                .filter(report -> matchesFilters(report, filters))
                .sorted(Comparator.comparing(ComplianceReport::getGeneratedAt).reversed())
                .skip((long) page * size)
                .limit(size)
                .collect(Collectors.toList());
    }

    /**
     * Check if a report matches the specified filters
     *
     * @param report  the report to check
     * @param filters the filters to apply
     * @return true if the report matches all filters, false otherwise
     */
    private boolean matchesFilters(ComplianceReport report, Map<String, Object> filters) {
        for (Map.Entry<String, Object> entry : filters.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            switch (key) {
                case "id":
                    if (!Objects.equals(report.getId(), value)) {
                        return false;
                    }
                    break;
                case "name":
                    if (report.getName() == null || !report.getName().toLowerCase().contains(((String) value).toLowerCase())) {
                        return false;
                    }
                    break;
                case "description":
                    if (report.getDescription() == null || !report.getDescription().toLowerCase().contains(((String) value).toLowerCase())) {
                        return false;
                    }
                    break;
                case "reportType":
                    if (!Objects.equals(report.getReportType(), value)) {
                        return false;
                    }
                    break;
                case "status":
                    if (!Objects.equals(report.getStatus(), value)) {
                        return false;
                    }
                    break;
                case "generatedBy":
                    if (!Objects.equals(report.getGeneratedBy(), value)) {
                        return false;
                    }
                    break;
                case "startDate":
                    if (report.getGeneratedAt().isBefore((LocalDateTime) value)) {
                        return false;
                    }
                    break;
                case "endDate":
                    if (report.getGeneratedAt().isAfter((LocalDateTime) value)) {
                        return false;
                    }
                    break;
            }
        }
        return true;
    }

    /**
     * Get distinct report types
     *
     * @return list of distinct report types
     */
    public List<String> findDistinctReportTypes() {
        return reports.values().stream()
                .map(ComplianceReport::getReportType)
                .filter(Objects::nonNull)
                .distinct()
                .collect(Collectors.toList());
    }

    /**
     * Get distinct statuses
     *
     * @return list of distinct statuses
     */
    public List<String> findDistinctStatuses() {
        return reports.values().stream()
                .map(ComplianceReport::getStatus)
                .filter(Objects::nonNull)
                .distinct()
                .collect(Collectors.toList());
    }

    /**
     * Count reports by report type
     *
     * @return map of report type to count
     */
    public Map<String, Long> countByReportType() {
        return reports.values().stream()
                .filter(report -> report.getReportType() != null)
                .collect(Collectors.groupingBy(ComplianceReport::getReportType, Collectors.counting()));
    }

    /**
     * Count reports by status
     *
     * @return map of status to count
     */
    public Map<String, Long> countByStatus() {
        return reports.values().stream()
                .filter(report -> report.getStatus() != null)
                .collect(Collectors.groupingBy(ComplianceReport::getStatus, Collectors.counting()));
    }

    /**
     * Count reports by generated by user
     *
     * @return map of user to count
     */
    public Map<String, Long> countByGeneratedBy() {
        return reports.values().stream()
                .filter(report -> report.getGeneratedBy() != null)
                .collect(Collectors.groupingBy(ComplianceReport::getGeneratedBy, Collectors.counting()));
    }

    /**
     * Count all reports
     *
     * @return count of all reports
     */
    public int count() {
        return reports.size();
    }

    /**
     * Delete a report by ID
     *
     * @param id the ID of the report to delete
     * @return true if the report was deleted, false if it wasn't found
     */
    public boolean deleteById(String id) {
        return reports.remove(id) != null;
    }

    /**
     * Delete all reports
     */
    public void deleteAll() {
        reports.clear();
    }
}