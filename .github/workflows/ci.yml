name: GrepWise CI

permissions:
  contents: write
  checks: write
  packages: write

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - uses: graalvm/setup-graalvm@v1
      with:
        version: 'latest'
        java-version: 25
        github-token: ${{ secrets.GITHUB_TOKEN }}
        distribution: 'graalvm-community'
        native-image-job-reports: 'true'
    
    - name: Build and Test with Maven
      run: mvn -ntp clean verify

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        report_paths: '**/target/surefire-reports/TEST-*.xml'
        fail_on_failure: true
        require_tests: true
        check_name: Backend Test Results

    - name: Generate HTML Test Report
      if: always()
      run: mvn -ntp surefire-report:report-only

    - name: Upload JUnit HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-html-report
        path: target/site/surefire-report.html
        retention-days: 30

    - name: Deploy JUnit Report to GitHub Pages
      if: always() && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: target/site
        destination_dir: backend/junit
        keep_files: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy backend JUnit report - ${{ github.sha }}'

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Dependencies
      run: cd frontend && npm ci
    
    - name: Run Tests
      run: cd frontend && npm run test:coverage
      
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Deploy Frontend Coverage to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: frontend/coverage
        destination_dir: frontend/coverage
        keep_files: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy frontend coverage report - ${{ github.sha }}'

  build-jar:
    name: Build JAR (Boot)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: 25
          github-token: ${{ secrets.GITHUB_TOKEN }}
          distribution: 'graalvm-community'
          native-image-job-reports: 'true'
      - name: Build Boot JAR
        run: mvn -ntp -DskipTests package
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: grepwise-jar
          path: |
            target/*-SNAPSHOT.jar
          retention-days: 7

      - name: Configure Maven settings for GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<'EOF'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${GITHUB_ACTOR}</username>
                <password>${GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Publish SNAPSHOT to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          java --version
          mvn -ntp deploy -DskipTests

  native-build:
    name: Native Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [backend-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: 25
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
      - name: Build native
        run: mvn -ntp -Pnative -DskipTests native:compile
      - name: Show target contents
        run: |
          ls target
      - name: Upload Native Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grepwise-native-${{ runner.os }}
          path: |
            target/grepwise
            target/grepwise.exe

  release:
    name: Release
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build-jar, native-build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: grepwise-jar
          path: dist
      - name: Download native artifacts (Linux & Windows)
        uses: actions/download-artifact@v4
        with:
          pattern: grepwise-native-*
          merge-multiple: true
          path: dist
      - name: List release assets
        run: ls -la dist
      - name: Determine release tag
        id: vars
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Create GitHub Release with assets (single call)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release for tag: ${{ steps.vars.outputs.TAG }}"
          gh release create "${{ steps.vars.outputs.TAG }}" dist/* \
            --target "${{ github.sha }}" \
            --title "GrepWise ${{ steps.vars.outputs.TAG }}" \
            --generate-notes \

            --latest

